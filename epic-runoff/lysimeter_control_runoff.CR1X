'The program is for use with a CR1000X Series Campbell Scientific datalogger. 
'The neccesarry compoenents include a Campbell Scientific AM 16/32 Multiplexer, 
'SPDT relay board, and 16 mini-lysimeters. 

'The program is designd to control 4 solenoid valves to automate irrigation in 4 independent irrigation zones. 
'Each zone is controlled by the average of three lysimeters in each zone. The program records
'the lysimeter mass, panel temperature, and battery voltage every five minutes 
'and outputs the table to the file titled 'store_5min_all'

'Author: Dalyn McCauley, M.S., Faculty Research Assistant
'Contact: dalyn.mccauley@oregonstate.edu

'Set to True to enable irrigation control. False to only measure. 
Public irr_control As Boolean


'Set the allowed depletion level you would like to trigger irrigation 
'Ex: 0.90 = 10% depletion
Public treat1 = 0.9
Public treat2 = 0.75

Public refill = 0.98 'percent weight to refill pots to.

Public fc_weight1 = 6.097 'Dec 18th 2024 at 15:50. And I subtracted the tray masses. 
Public fc_weight2 = 6.302

Public vpd_set = 1.5 'kPa
Public T_dur = 28 'Duration of timer in seconds
Public max_count = 288 'Irrigation will never be going for longer than 1.5 hour2 (18 - 5 minute pulses)

Public mass(16), mass_c(16),lys_mass(16), avg_mass(4), avg_massi(4), trig_mass(4), irr_count(4),  perFC(4),stdv(4)
Public fill(4) As Boolean
Public lys_array(4,4)

'Declare Variables and Units
Public BattV
Public PTemp_C

Dim lcnum(16)
Public LCount As Long
Public Flag(12), switch(7)
Public irr(4) As Boolean
Public foggers As Boolean
Public Total_sol_on, outlier_detected
Public num_sol = 4 
Public T1,T2,T3,T4,T_fog,i,j
Public HMP_T, HMP_RH, PAR_Den, PAR_Tot, RadW, RadMJ, vpd, es, ea

' Change the Mult and Off variables to match the specific calibration equations 
' for your load cells. This should be in units of kg
' CALIBRATED ON 1/8/24
' Public Mult(16)={6.51463494,6.711409396,6.800098686,6.733981287,6.688738759,6.779635049,6.733981287,6.733981287,6.779635049,6.993006993,6.992893004,6.666666667,6.802721088,6.825912063,6.896551724,6.849315068}
Public Mult(16)={6.535947712,	6.737917852,	7.007366751,	6.730099429,	6.659011225,	6.794750148,	6.863090242,	6.722296239,	6.78362536,	6.981219277,	6.987920159,	6.664361746,	6.80830727,	6.821923876,	6.874476236,	6.841234618}

' Public Offs(16)={-1.010850651,-0.805369128,-1.962576328,-0.930407969,-1.869468928,-1.036150393,-0.896738062,-1.650943967,-1.845186842,-1.363636364,-1.277352155,-1.093333333,-1.319727891,-0.26734434,-1.689655172,-1.239726027} 'kg
Public Offs(16)={-1.058823529,	-0.808898466,	-2.093630509,	-1.002436518,	-1.737312328,	-1.08645635,	-1.185774863,	-1.592139401,	-1.933683913,	-1.32751313,	-1.258773628,	-1.096743514,	-1.339004392,	-0.211126588,-1.685073701,-1.217031269}

' Change the Mult_T and Off_T variables to match the specific temperature
' correction results for your load cells. 
' These should be in units of grams/degC and grams. 
Public Mult_T(16) ={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
Public Offs_T(16) ={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

'Define constants and Aliases that are used throughout the program. 
Const on = 1
Const off = 0
Alias switch(1) = readsensors

'Define Units of vairables for table output.
Units BattV=Volts
Units PTemp_C=Deg C
Units mass=mV/V
Units lys_mass = Kg
Units PAR_Den=umol/s/m^2
Units PAR_Tot=mmol/m^2

'Define Data Tables
DataTable(store5min_all,True,-1)
  DataInterval(0,5,Min,-1)
  Sample(1,BattV,IEEE4,0)
  Sample(1,PTemp_C,IEEE4,0)
  Sample(1,avg_massi(1), IEEE4,0)
  Sample(1,avg_massi(2), IEEE4,0)
  Sample(1,avg_mass(1), IEEE4,0)
  Sample(1,avg_mass(2), IEEE4,0)
  Sample(1,stdv(1),IEEE4,0)
  Sample(1,stdv(2),IEEE4,0)
  Sample(1,perFC(1), IEEE4,0)
  Sample(1,perFC(2), IEEE4,0)
  Sample(16, lys_array(),IEEE4,0)
  Sample(16,lys_mass(),IEEE4)
  Sample(1,outlier_detected,IEEE4)
  Totalize(1,irr(1),IEEE4,0)
  Totalize(1,irr(2),IEEE4,0)
  Average(1,PAR_Den,FP2,False)
	Totalize(1,PAR_Tot,IEEE4,False)
	Average(1,vpd,IEEE4,0)
  Average(1,HMP_T,IEEE4,0)
  Average(1,HMP_RH,IEEE4,0)
  Average(1,RadW,IEEE4,0)
  Average(1,RadMJ,IEEE4,0)
  Totalize(1,foggers,IEEE4,0)
EndTable

'These are intermediary tables used to simplify the program.
DataTable(meanmass,Flag(3),-1)
	Average(16,mass(),IEEE4,0)
	StdDev(1,lys_mass(),IEEE4,0)
	Sample(16,lys_array(),IEEE4,0)
EndTable

DataTable(meanmass_c,Flag(3),-1)
	Average(16,mass_c(),IEEE4,0)
EndTable

'Define the subroutine for starting irrigation
Sub irr_start
    AvgSpa(Total_sol_on,num_sol,irr(1)) 
    'Total_sol_on = Total_sol_on * -num_sol
    If irr(1) = True
      PortSet(C3,1)
      T1 = Timer(1,sec,0)
    EndIf
    
    'If irr(2) = True AND Total_sol_on <= 1
    If irr(2) = True AND irr(1) = False
      PortSet(C4,1)
      T2 = Timer(2,sec,0)
    EndIf
    
  ' If the timer is greater than 30s
  ' turn solenoid off and set irr() flag to zero
    If T1 >= T_dur Then
      PortSet(C3,0)
      irr_count(1) = irr_count(1) + 1
      T1 = Timer(1,sec,3) ' stop and reset timer
      irr(1) = False
    EndIf
 
    If T2 >= T_dur
      PortSet(C4,0)
      irr_count(2) = irr_count(2) + 1
      T2 = Timer(2,sec,3)
      irr(2) = False
    EndIf
EndSub

Sub foggers_on
    If foggers = True
      SW12(SW12_2,1)
      T_fog = Timer(5,sec,0)
    EndIf
    
    If T_fog >= 20
      SW12(SW12_2,0)
      foggers = False
      T_fog = Timer(5,sec,3)
    EndIf
EndSub
    
'Main Program
BeginProg

SequentialMode
	'Main Scan
	irr_control = True
  
  trig_mass(1) = fc_weight1*treat1
  trig_mass(2) = fc_weight2*treat2
 
	irr(1) = False
	irr(2) = False
	Scan(30,Sec,0,0) 
	  outlier_detected = 0
	  SW12 (SW12_1,1)
	  'Default CR1000X Datalogger Battery Voltage measurement 'BattV'
		Battery(BattV)
		'Default CR1000X Datalogger Wiring Panel Temperature measurement 'PTemp_C'
		PanelTemp(PTemp_C,60)
	  'CS300 Pyranometer measurements 'SlrMJ' and 'SlrW'
		VoltSe(RadW,1,mV1000,5,True,0,60,1,0)
		If RadW<0 Then RadW=0
		'Calculate total flux
		'The multiplier to calculate total flux was calculated by Short Cut
		'and based on a program execution rate (scan rate) of 5 Seconds.
		'If you change the program execution rate outside of Short Cut with the CRBasic Editor
		'you will need to recalculate this multiplier. See the sensor manual for more details.
		RadMJ=RadW*2.5E-05
		'Calculate flux density
		RadW=RadW*5
		
		
		'HMP50/HMP60 Temperature & Relative Humidity Sensor measurements 'AirTC' and 'RH'
		VoltSe(HMP_T,1,mV1000,9,False,0,60,0.1,-40)
		VoltSe(HMP_RH,1,mV1000,10,False,0,60,0.1,0)
		SW12 (SW12_1,0)
		If (HMP_RH>100) AND (HMP_RH<108) Then HMP_RH=100 
    SatVP (es,HMP_T)
    ea = es*HMP_RH/100
    vpd = es - ea
		'LI190R Quantum Sensor measurements 'PAR_Tot' and 'PAR_Den
		VoltDiff(PAR_Den,1,mV200,4,True,0,60,1,0)
		If PAR_Den<0 Then PAR_Den=0
		'Calculate total flux
		'The multiplier to calculate total flux was calculated by Short Cut
		'and based on a program execution rate (scan rate) of 30 Seconds.
		'If you change the program execution rate outside of Short Cut with the CRBasic Editor
		'you will need to recalculate this multiplier. See the sensor manual for more details.
		PAR_Tot=PAR_Den*6.794648
		'Calculate flux density
		PAR_Den=PAR_Den*226.4883
		
		    'Trigger a lysimeter read at the third minute into every five minute interval
    If TimeIntoInterval(30,300,Sec) Then
      readsensors = true
    EndIf
		
    'Begin to query sensors when the readsensors switch is triggered. 
		If readsensors = True Then
		  'Loop counter will count up to 5 before it is restarted for the next measurement. 
  		LCount=LCount+1  		
      'Switch to MUX port
  		PortSet(C2,1)
  		Delay(0,150,mSec)
  		SubScan(0,uSec,16)
  			'Switch to next AM16/32 Multiplexer channel
  			PulsePort(C1,10000)
        'Count through the load cell numbers (1-16)
  			lcnum = lcnum + 1
  			
  			'Generic Full Bridge measurements 'LC()' on the AM16/32 Multiplexer
  			BrFull(mass(lcnum),1,AutoRange,1,VX1,1,2500,False,True,500,60,Mult(lcnum),Offs(lcnum))
  			mass_c(lcnum) = mass(lcnum) - (PTemp_C*Mult_T(lcnum)+Offs_T(lcnum))/1000
  		
      'Go to next load cell scan	
  		NextSubScan
  		'Take the average of the five scans and put them in the meanmass table
  		CallTable(meanmass)
  		CallTable(meanmass_c)
  		
  		'Turn AM16/32 Multiplexer Off
  		PortSet(C2,0)
  		Delay(0,150,mSec)
  		'Restart the LC number counter
  		lcnum = 0		
		EndIf	

    'When the Loop count (LCount) reaches 10, record the 10 sample average for each load cell
    If LCount = 10 Then
       'Turn on Flag(3) whcih compiles the lysimeter masses and checks for 
       'irrigation need. 
       Flag(3) = True
       'Take the average of the scans and put them in the meanmass table
    	 CallTable meanmass
    	 CallTable meanmass_c
    EndIf
   
    'Retrieves average mass per lysimeter from meanmass table and puts it in the array lys_mass(). 
    If Flag(3) = True Then 
      GetRecord(lys_mass(),meanmass_c,1) ' Put five minute averages LC measurement into new array
      'TREATMENT 1
      lys_array(1,1) = lys_mass(2) - .556
      lys_array(1,2) = lys_mass(5) - .574
      lys_array(1,3) = lys_mass(8) - .517
      lys_array(1,4) = lys_mass(4) - .641
      'TREATMENT 2
      lys_array(2,1) = lys_mass(1) - .588
      lys_array(2,2) = lys_mass(3) - .554
      lys_array(2,3) = lys_mass(6) - .449
      lys_array(2,4) = lys_mass(7) - .466
      'CATCH CAN TREAT 1
      lys_array(3,1) = lys_mass(10) - 1.123
      lys_array(3,2) = lys_mass(11) - 1.167
      lys_array(3,3) = lys_mass(13) - 1.204
      lys_array(3,4) = lys_mass(16) - 1.134
      'CATCH CAN TREAT 2
      lys_array(4,1) = lys_mass(9) - 1.146
      lys_array(4,2) = lys_mass(12) - 1.201
      lys_array(4,3) = lys_mass(14) - 1.179
      lys_array(4,4) = lys_mass(15) -1.118
      
      If irr_control = True Then
        'Calculate the current avaerage mass per irrigation treatment zone, denoted avg_mass. 
        AvgSpa(avg_massi(1),4,lys_array(1,1))
        AvgSpa(avg_massi(2),4,lys_array(2,1))
        AvgSpa(avg_massi(3),4,lys_array(3,1))
        AvgSpa(avg_massi(4),4,lys_array(4,1))
        
        StdDevSpa (stdv(1),4,lys_array(1,1))
        StdDevSpa (stdv(2),4,lys_array(2,1))
        StdDevSpa (stdv(3),4,lys_array(3,1))
        StdDevSpa (stdv(4),4,lys_array(4,1))
        
        
        SubScan(0,uSec,10)
          For i = 1 To 2
            For j = 1 To 4
              If lys_array(i,j) > avg_massi(i) + 2*stdv(i) Then
                 lys_array(i,j) = NAN
                 outlier_detected = outlier_detected + 1
              EndIf
              If lys_array(i,j) < avg_massi(i) - 2*stdv(i) Then
                 lys_array(i,j) = NAN
                 outlier_detected = outlier_detected + 1
              EndIf
              If lys_array(i,j) < 1.0 OR lys_array(i,j) > 7.5 Then
                 lys_array(i,j) = NAN
                 outlier_detected = outlier_detected + 1
              EndIf
            Next
          Next
        NextSubScan
        
        AvgSpa(avg_mass(1),4,lys_array(1,1))
        AvgSpa(avg_mass(2),4,lys_array(2,1))
        AvgSpa(avg_mass(3),4,lys_array(3,1))
        AvgSpa(avg_mass(4),4,lys_array(4,1))
        
        perFC(1) = avg_mass(1) / fc_weight1 * 100
        perFC(2) = avg_mass(2) / fc_weight2 * 100

       'If the trigger mass Is below the threshold, irrigation Is initiated For that zone.   
       'TREATMENT 1
        If avg_mass(1)< trig_mass(1) Then 
  				irr(1) = True 'If true, turn on irrigation flag for that zone.
  				fill(1) = True 'Flag to note we are on the fill up, not dry down. 
  			EndIf
  			If fill(1) = True AND avg_mass(1) < refill * fc_weight1 Then
  			  irr(1) = True 'Keep irrigation while we are below FC wieght, only on the fill up. 
  			EndIf
        If avg_mass(1)>= refill * fc_weight1 OR irr_count(1) >= max_count Then 
          irr_count(1) = 0.0 'reset counter
          fill(1) = False ' Once we reach fc weight, turn off fill up flag. 
  				irr(1) = False 'If true, turn on irrigation flag for that zone.
  			EndIf
  			
  			'TREATMENT 2
        If avg_mass(2)< trig_mass(2) Then 
  				irr(2) = True 'If true, turn on irrigation flag for that zone. 
  				fill(2) = True
  			EndIf
  			If fill(2) = True AND avg_mass(2) < refill * fc_weight2 Then
  			  irr(2) = True 'Keep irrigation while we are below FC wieght, only on the fill up. 
  			EndIf
        If avg_mass(2)>= refill * fc_weight2 OR irr_count(2) >= max_count Then 
          irr_count(2) = 0.0 'reset counter
          fill(2) = False ' Once we reach fc weight, turn off fill up flag. 
  				irr(2) = False 'If true, turn on irrigation flag for that zone.
  			EndIf
  		EndIf
  			
      If vpd >= vpd_set Then
          If TimeIntoInterval(0,600,Sec) Then
            foggers = True
          EndIf
      EndIf
    EndIf
    
    If irr_control = True Then
      'If any of the irrigation flags are true, call irr_start subroutine.
      If irr(1) = True OR irr(2) = True
      	Call irr_start
      EndIf
    EndIf
    
    If foggers = True Then
        Call foggers_on
    EndIf
    
    'Once the average mass has been recorded and irrigation need assessed,
    'reset the flag and the Loop Counter for next measurement
    If Flag(3)=true AND LCount = 10 Then
      Flag(3) = False
      LCount = 0
      readsensors = False
    EndIf
    
    'Store the five minute average values in a table every five minutes
    If TimeIntoInterval(0,5,Min) Then
      CallTable store5min_all
    EndIf 
	NextScan
EndProg
